import re
from flask import Flask, request
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage, QuickReply, QuickReplyButton, MessageAction, FlexSendMessage, ImageSendMessage
)
import requests

LINE_CHANNEL_ACCESS_TOKEN = "pOeuYts3fBz7/7EKuLM/MbtWuwwafC8j3PEt7aO5BYiSYN6ktoeCTdY/9hioytXloOlymxzh0Q7mYgtjt5bkkR/xoz33wJIhu+ZAvZ0SKISMJaVrSxQdu7ue6aZJXZt2HdLNpQIzFvNsupbHK5qwPgdB04t89/1O/w1cDnyilFU="
LINE_CHANNEL_SECRET = "a97292ce3ac2827d0ac77ab4deac0ea8"

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

PREDICTION_API_URL = "https://bot-api-hxi2.onrender.com/predict"

user_sessions = {}

app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "Line Chatbot for Penguin Prediction is Running."

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        return "Invalid signature", 400

    return "OK"

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    user_input = event.message.text.strip().lower()

    if user_input in ["help", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ", "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°"]:
        reply_text = (
            "üîπ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô\n"
            "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏Ñ‡πà‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ!\n"
            "1Ô∏è‚É£ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå\n"
            "2Ô∏è‚É£ ü©∫ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î, ‡∏≠‡∏¥‡∏ô‡∏ã‡∏π‡∏•‡∏¥‡∏ô ‡∏Ø‡∏•‡∏Ø\n"
            "3Ô∏è‚É£ ‚úçÔ∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ô‡∏∞!)\n"
            "4Ô∏è‚É£ üìä ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö\n"
            "üîÑ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà? ‡πÅ‡∏Ñ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! üíô"
        )
        reply_image = ImageSendMessage(
            original_content_url="https://i.imgur.com/RO1qyeb.png",
            preview_image_url="https://i.imgur.com/RO1qyeb.png"
        )
        line_bot_api.reply_message(event.reply_token, [TextSendMessage(text=reply_text), reply_image])
        return

    if user_input in ["prediction", "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", "predict", "predictions"]:
        user_sessions[user_id] = {"step": 1, "data": {}}
        reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (mg/dL) ‚Üí ‡πÄ‡∏ä‡πà‡∏ô 90"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
        return

    if user_input in ["‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]:
        if user_id not in user_sessions or "data" not in user_sessions[user_id]:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"))
            return

        user_data = user_sessions[user_id]["data"]

        response = requests.post(PREDICTION_API_URL, json=user_data)
        result = response.json()

        if "prediction" in result:
            reply_text = f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result['prediction']}"
        else:
            reply_text = f"Error: {result.get('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ')}"

        del user_sessions[user_id]  
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
        return

    if user_input == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        del user_sessions[user_id]  
        reply_text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text)) 
        return

    if user_id in user_sessions:
        session = user_sessions[user_id]
        step = session["step"]

        try:
            if step in [1, 2, 3]:  
                if not re.match(r'^\d+(\.\d+)?$', user_input):
                    reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 120"
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
                    return

                value = float(user_input)

                if step == 1:
                    session["data"]["Glucose"] = value
                    reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏ã‡∏π‡∏•‡∏¥‡∏ô (ŒºU/mL) ‚Üí ‡πÄ‡∏ä‡πà‡∏ô 15"
                elif step == 2:
                    session["data"]["Insulin"] = value
                    reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ BMI (kg/m¬≤) ‚Üí ‡πÄ‡∏ä‡πà‡∏ô 22.5:"
                elif step == 3:
                    session["data"]["BMI"] = value
                    summary_flex = create_summary_flex(session["data"])
                    line_bot_api.reply_message(event.reply_token, summary_flex)
                    return

                session["step"] += 1
        
        except ValueError:
            reply_text = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
            return

        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
        return


def create_summary_flex(user_data):
    flex_message = {
        "type": "bubble",
        "size": "mega",
        "body": {
            "type": "box",
            "layout": "vertical",
            "backgroundColor": "#9dc050", 
            "cornerRadius": "md",
            "paddingAll": "lg",
            "contents": [
                {
                    "type": "text",
                    "text": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô",
                    "weight": "bold",
                    "size": "xl",
                    "color": "#ffffff",  
                    "align": "center"
                },
                {
                    "type": "separator",
                    "margin": "sm",
                    "color": "#ffffff"
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "sm",
                    "spacing": "xs",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (mg/dL): {user_data['Glucose']} mm",
                            "size": "md",
                            "color": "#4f4f4f"
                        },
                        {
                            "type": "text",
                            "text": f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏ã‡∏π‡∏•‡∏¥‡∏ô (ŒºU/mL): {user_data['Insulin']} mm",
                            "size": "md",
                            "color": "#4f4f4f"
                        },
                        {
                            "type": "text",
                            "text": f"‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ BMI (kg/m¬≤): {user_data['BMI']} mm",
                            "size": "md",
                            "color": "#4f4f4f"
                        },
                    ]
                },
                {
                    "type": "separator",
                    "margin": "sm",
                    "color": "#ffffff"
                },
                {
                    "type": "text",
                    "text": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                    "margin": "sm",
                    "size": "md",
                    "color": "#ffffff",
                    "align": "center",
                    "weight": "bold"
                }
            ]
        },
        "footer": {
            "type": "box",
            "layout": "vertical",
            "backgroundColor": "#9dc050",  
            "cornerRadius": "md",
            "paddingAll": "sm",
            "contents": [
                {
                    "type": "button",
                    "style": "primary",
                    "color": "#4a7337",
                    "action": {
                        "type": "message",
                        "label": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                        "text": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                    },
                    "height": "sm",
                    "margin": "none"
                },
                {
                    "type": "button",
                    "style": "primary",
                    "color": "#704012",
                    "action": {
                        "type": "message",
                        "label": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                        "text": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
                    },
                    "height": "sm",
                    "margin": "md"
                }
            ]
        }
    }
    return FlexSendMessage(alt_text="‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", contents=flex_message)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
